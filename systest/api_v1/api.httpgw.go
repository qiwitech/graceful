// Code generated by protoc-gen-httpgw
// source: api.proto
// DO NOT EDIT!

/*
Package api_v1 is a http proxy.
*/

package api_v1

import (
	"context"

	"github.com/pressly/chi"
	"github.com/qiwitech/graceful"
)

func NewAPIHandler(srv APIInterface, c graceful.Codec) graceful.Handlerer {
	return AddAPIHandlers(nil, srv, c)
}
func AddAPIHandlers(mux graceful.Handlerer, srv APIInterface, c graceful.Codec) graceful.Handlerer {
	if mux == nil {
		mux = chi.NewMux()
	}

	mux.Handle("/Transfer", graceful.NewHandler(
		c,
		func() interface{} { return &TransferRequest{} },
		func(ctx context.Context, args interface{}) (interface{}, error) {
			return srv.Transfer(ctx, args.(*TransferRequest))
		}))

	mux.Handle("/UpdateSettings", graceful.NewHandler(
		c,
		func() interface{} { return &UpdateSettingsRequest{} },
		func(ctx context.Context, args interface{}) (interface{}, error) {
			return srv.UpdateSettings(ctx, args.(*UpdateSettingsRequest))
		}))

	mux.Handle("/GetPrevHash", graceful.NewHandler(
		c,
		func() interface{} { return &PrevHashRequest{} },
		func(ctx context.Context, args interface{}) (interface{}, error) {
			return srv.GetPrevHash(ctx, args.(*PrevHashRequest))
		}))

	mux.Handle("/GetHistory", graceful.NewHandler(
		c,
		func() interface{} { return &HistoryRequest{} },
		func(ctx context.Context, args interface{}) (interface{}, error) {
			return srv.GetHistory(ctx, args.(*HistoryRequest))
		}))

	mux.Handle("/GetStats", graceful.NewHandler(
		c,
		func() interface{} { return &StatsRequest{} },
		func(ctx context.Context, args interface{}) (interface{}, error) {
			return srv.GetStats(ctx, args.(*StatsRequest))
		}))

	mux.Handle("/GetAccounts", graceful.NewHandler(
		c,
		func() interface{} { return &AccountsRequest{} },
		func(ctx context.Context, args interface{}) (interface{}, error) {
			return srv.GetAccounts(ctx, args.(*AccountsRequest))
		}))

	mux.Handle("/GetAccountSettings", graceful.NewHandler(
		c,
		func() interface{} { return &AccountSettingsRequest{} },
		func(ctx context.Context, args interface{}) (interface{}, error) {
			return srv.GetAccountSettings(ctx, args.(*AccountSettingsRequest))
		}))

	return mux
}

type APIHTTPClient struct {
	*graceful.Client
}

func NewAPIHTTPClient(cl *graceful.Client) APIHTTPClient {
	return APIHTTPClient{
		Client: cl,
	}
}

func (cl APIHTTPClient) Transfer(ctx context.Context, args *TransferRequest) (*TransferResponse, error) {
	var resp TransferResponse
	err := cl.Client.Call(ctx, "Transfer", args, &resp)
	return &resp, err
}

func (cl APIHTTPClient) UpdateSettings(ctx context.Context, args *UpdateSettingsRequest) (*UpdateSettingsResponse, error) {
	var resp UpdateSettingsResponse
	err := cl.Client.Call(ctx, "UpdateSettings", args, &resp)
	return &resp, err
}

func (cl APIHTTPClient) GetPrevHash(ctx context.Context, args *PrevHashRequest) (*PrevHashResponse, error) {
	var resp PrevHashResponse
	err := cl.Client.Call(ctx, "GetPrevHash", args, &resp)
	return &resp, err
}

func (cl APIHTTPClient) GetHistory(ctx context.Context, args *HistoryRequest) (*HistoryResponse, error) {
	var resp HistoryResponse
	err := cl.Client.Call(ctx, "GetHistory", args, &resp)
	return &resp, err
}

func (cl APIHTTPClient) GetStats(ctx context.Context, args *StatsRequest) (*StatsResponse, error) {
	var resp StatsResponse
	err := cl.Client.Call(ctx, "GetStats", args, &resp)
	return &resp, err
}

func (cl APIHTTPClient) GetAccounts(ctx context.Context, args *AccountsRequest) (*AccountsResponse, error) {
	var resp AccountsResponse
	err := cl.Client.Call(ctx, "GetAccounts", args, &resp)
	return &resp, err
}

func (cl APIHTTPClient) GetAccountSettings(ctx context.Context, args *AccountSettingsRequest) (*AccountSettingsResponse, error) {
	var resp AccountSettingsResponse
	err := cl.Client.Call(ctx, "GetAccountSettings", args, &resp)
	return &resp, err
}

type APIInterface interface {
	Transfer(context.Context, *TransferRequest) (*TransferResponse, error)

	UpdateSettings(context.Context, *UpdateSettingsRequest) (*UpdateSettingsResponse, error)

	GetPrevHash(context.Context, *PrevHashRequest) (*PrevHashResponse, error)

	GetHistory(context.Context, *HistoryRequest) (*HistoryResponse, error)

	GetStats(context.Context, *StatsRequest) (*StatsResponse, error)

	GetAccounts(context.Context, *AccountsRequest) (*AccountsResponse, error)

	GetAccountSettings(context.Context, *AccountSettingsRequest) (*AccountSettingsResponse, error)
}
